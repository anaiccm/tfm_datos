# -*- coding: utf-8 -*-
"""Proceso ETL de preparacion de datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IqwR2BeujOsL7rrV7CP_g6jFKu3Zh82v

# **Proceso ETL de Preparación de Datos**

Este proceso tiene por objetivo la importación de datos de los casos de COVID de 2020 y 2021 en España, así como su preparación para su posterior uso en Power BI.
"""

import pandas as pd

# Importación de los datos covid
url_casos_prov = "https://raw.githubusercontent.com/raul-ssj/python/main/casos_hosp_uci_def_sexo_edad_provres.csv"
url_casos_ccaa = "https://raw.githubusercontent.com/raul-ssj/python/main/casos_diag_ccaadecl.csv"

df_casos_prov = pd.read_csv(url_casos_prov)
df_casos_ccaa = pd.read_csv(url_casos_ccaa)

print(df_casos_prov)
print(df_casos_ccaa)

#Filtrado de las filas que contienen datos válidos
df_casos_ccaa_2 = df_casos_ccaa[df_casos_ccaa['ccaa_iso'] != "NC"]
df_casos_prov_2 = df_casos_prov[(df_casos_prov['provincia_iso'] != "NC") & (df_casos_prov['sexo'] != "NC") & (df_casos_prov['grupo_edad'] != "NC")]

print(df_casos_ccaa_2)
print(df_casos_prov_2)

# Exportación de datos
path_covid_ccaa = "datos_df_ccaa.csv"
path_covid_prov = "datos_df_provincias.csv"

df_casos_ccaa_2.to_csv(path_covid_ccaa, encoding='utf-8', index=False)
df_casos_prov_2.to_csv(path_covid_prov, encoding='utf-8', index=False)

"""**Representación de Datos estadísticos y representación para los datos covid (CCAA)**


"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Ordenamiento por 'fecha' y agrupación por 'fecha'
df_casos_ccaa_2 = df_casos_ccaa_2.sort_values(["fecha"], ascending = (True))

year = df_casos_ccaa_2["fecha"]
num_casos = df_casos_ccaa_2["num_casos"]
plt.title('Numeros de casos COVID VS Fecha')
plt.xlabel('Fecha')
plt.ylabel('N. Casos COVID')
plt.plot(year, num_casos)

print(df_casos_ccaa_2.describe())

"""**Representación de Datos estadísticos y representación para los datos covid (PROVINCIAS)**"""

# Ordenamiento por 'fecha' y agrupación por 'fecha'
df_casos_prov_2 = df_casos_prov_2.sort_values(["fecha"], ascending = (True))

year = df_casos_prov_2["fecha"]
num_casos = df_casos_prov_2["num_casos"]
plt.title('Numeros de casos COVID VS Fecha')
plt.xlabel('Fecha')
plt.ylabel('N. Casos COVID')
plt.plot(year, num_casos)

print(df_casos_prov_2.describe())

"""**Transformación de datos de CCAA**"""

# Datos de Comunidades Autónomas de España
# Se incluye una nueva categoría "C.A." para referierse a las ciudades autónomas de Ceua y Melilla
url_ccaa = "https://raw.githubusercontent.com/raul-ssj/python/main/ccaa.csv"
df_ccaa = pd.read_csv(url_ccaa)

# Renombrar columnas
df_ccaa = df_ccaa.rename(columns={'Código': 'iso_ccaa', 'Nombre de la subdivisión en la ISO​': 'nombre_ccaa'})

# Eliminar el código del país para dejar únicamente el código de la CCAA
df_ccaa["iso_ccaa"] = df_ccaa["iso_ccaa"].str.replace("ES-", "")

# Nueva entrada para las 'Ciudades Autónomas'
ciudad_autonoma = {'iso_ccaa': 'C.A.', 'nombre_ccaa': 'Ciudad Autónoma'}
df_ccaa = df_ccaa.append(ciudad_autonoma, ignore_index=True)

# Ordenar datos por código ISO
df_ccaa = df_ccaa.sort_values(["iso_ccaa"], ascending = (True))

# Exportar datos a CSV
df_ccaa.to_csv("codigos_ccaa.csv", encoding='utf-8', index=False)

# Imprimir por pantalla
print(df_ccaa)

"""**Transformación de datos de Provincias**"""

# Datos de Provincias por CCAA en España
# También se incluyen las ciudades autónomas de Ceua y Melilla dentro de este DataFrame
url_provincias = "https://raw.githubusercontent.com/raul-ssj/python/main/provincias.csv"
df_provincias = pd.read_csv(url_provincias)

# Renombrar columnas
df_provincias = df_provincias.rename(columns={'Código': 'iso_provincia', 'Nombre de la subdivisión en la ISO​': 'nombre_provincia', 'Comunidad autónoma': 'iso_ccaa_fk'})

#Incluir las ciudades autónomas
ceuta = {'iso_provincia': 'ES-CE','nombre_provincia': 'Ceuta', 'iso_ccaa_fk': 'C.A.'}
melilla = {'iso_provincia': 'ES-ML','nombre_provincia': 'Melilla', 'iso_ccaa_fk': 'C.A.'}
df_provincias = df_provincias.append(ceuta, ignore_index=True)
df_provincias = df_provincias.append(melilla, ignore_index=True)

# Eliminar el código del país para dejar únicamente el código de la provincia
df_provincias["iso_provincia"] = df_provincias["iso_provincia"].str.replace("ES-", "") 

# Ordenar datos por código ISO
df_provincias = df_provincias.sort_values(["iso_provincia"], ascending = (True))

# Exportar datos a CSV
df_provincias.to_csv("codigos_provincias.csv", encoding='utf-8', index=False)

# Imprimir por pantalla
print(df_provincias.tail)